/**
 * API Test Script cho Module Promotion
 * 
 * S·ª≠ d·ª•ng ƒë·ªÉ test c√°c API endpoints c·ªßa module khuy·∫øn m√£i
 * 
 * @author Spring Boot Team
 * @version 1.0
 */

class PromotionAPITester {
    constructor(baseURL = 'http://localhost:8080') {
        this.baseURL = baseURL;
        this.apiBase = `${baseURL}/api/promotions`;
    }

    /**
     * Test t·∫°o khuy·∫øn m√£i m·ªõi
     */
    async testCreatePromotion() {
        const promotionData = {
            name: "Test Khuy·∫øn m√£i API",
            description: "Khuy·∫øn m√£i test t·ª´ API",
            discountPercent: 20,
            startDate: "2024-01-01T00:00:00",
            endDate: "2024-12-31T23:59:59",
            isActive: true
        };

        try {
            const response = await fetch(this.apiBase, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(promotionData)
            });

            const result = await response.json();
            console.log('‚úÖ T·∫°o khuy·∫øn m√£i th√†nh c√¥ng:', result);
            return result.data;
        } catch (error) {
            console.error('‚ùå L·ªói t·∫°o khuy·∫øn m√£i:', error);
            throw error;
        }
    }

    /**
     * Test l·∫•y danh s√°ch khuy·∫øn m√£i
     */
    async testGetAllPromotions() {
        try {
            const response = await fetch(this.apiBase);
            const result = await response.json();
            console.log('‚úÖ L·∫•y danh s√°ch khuy·∫øn m√£i th√†nh c√¥ng:', result);
            return result.data;
        } catch (error) {
            console.error('‚ùå L·ªói l·∫•y danh s√°ch khuy·∫øn m√£i:', error);
            throw error;
        }
    }

    /**
     * Test l·∫•y khuy·∫øn m√£i theo ID
     */
    async testGetPromotionById(id) {
        try {
            const response = await fetch(`${this.apiBase}/${id}`);
            const result = await response.json();
            console.log('‚úÖ L·∫•y khuy·∫øn m√£i theo ID th√†nh c√¥ng:', result);
            return result.data;
        } catch (error) {
            console.error('‚ùå L·ªói l·∫•y khuy·∫øn m√£i theo ID:', error);
            throw error;
        }
    }

    /**
     * Test c·∫≠p nh·∫≠t khuy·∫øn m√£i
     */
    async testUpdatePromotion(id, updateData) {
        try {
            const response = await fetch(`${this.apiBase}/${id}`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(updateData)
            });

            const result = await response.json();
            console.log('‚úÖ C·∫≠p nh·∫≠t khuy·∫øn m√£i th√†nh c√¥ng:', result);
            return result.data;
        } catch (error) {
            console.error('‚ùå L·ªói c·∫≠p nh·∫≠t khuy·∫øn m√£i:', error);
            throw error;
        }
    }

    /**
     * Test t√¨m ki·∫øm khuy·∫øn m√£i
     */
    async testSearchPromotions(searchTerm) {
        try {
            const response = await fetch(`${this.apiBase}/search?name=${encodeURIComponent(searchTerm)}`);
            const result = await response.json();
            console.log('‚úÖ T√¨m ki·∫øm khuy·∫øn m√£i th√†nh c√¥ng:', result);
            return result.data;
        } catch (error) {
            console.error('‚ùå L·ªói t√¨m ki·∫øm khuy·∫øn m√£i:', error);
            throw error;
        }
    }

    /**
     * Test l·∫•y khuy·∫øn m√£i ƒëang ho·∫°t ƒë·ªông
     */
    async testGetActivePromotions() {
        try {
            const response = await fetch(`${this.apiBase}/active`);
            const result = await response.json();
            console.log('‚úÖ L·∫•y khuy·∫øn m√£i ƒëang ho·∫°t ƒë·ªông th√†nh c√¥ng:', result);
            return result.data;
        } catch (error) {
            console.error('‚ùå L·ªói l·∫•y khuy·∫øn m√£i ƒëang ho·∫°t ƒë·ªông:', error);
            throw error;
        }
    }

    /**
     * Test ph√¢n trang
     */
    async testGetPromotionsPaged(page = 0, size = 10) {
        try {
            const response = await fetch(`${this.apiBase}/paged?page=${page}&size=${size}`);
            const result = await response.json();
            console.log('‚úÖ L·∫•y khuy·∫øn m√£i c√≥ ph√¢n trang th√†nh c√¥ng:', result);
            return result.data;
        } catch (error) {
            console.error('‚ùå L·ªói l·∫•y khuy·∫øn m√£i c√≥ ph√¢n trang:', error);
            throw error;
        }
    }

    /**
     * Test ƒë·∫øm khuy·∫øn m√£i
     */
    async testCountPromotions(isActive = null) {
        try {
            const url = isActive !== null ? 
                `${this.apiBase}/count?isActive=${isActive}` : 
                `${this.apiBase}/count`;
            const response = await fetch(url);
            const result = await response.json();
            console.log('‚úÖ ƒê·∫øm khuy·∫øn m√£i th√†nh c√¥ng:', result);
            return result.data;
        } catch (error) {
            console.error('‚ùå L·ªói ƒë·∫øm khuy·∫øn m√£i:', error);
            throw error;
        }
    }

    /**
     * Test x√≥a khuy·∫øn m√£i
     */
    async testDeletePromotion(id) {
        try {
            const response = await fetch(`${this.apiBase}/${id}`, {
                method: 'DELETE'
            });

            const result = await response.json();
            console.log('‚úÖ X√≥a khuy·∫øn m√£i th√†nh c√¥ng:', result);
            return result;
        } catch (error) {
            console.error('‚ùå L·ªói x√≥a khuy·∫øn m√£i:', error);
            throw error;
        }
    }

    /**
     * Ch·∫°y t·∫•t c·∫£ tests
     */
    async runAllTests() {
        console.log('üöÄ B·∫Øt ƒë·∫ßu test API Promotion...\n');

        try {
            // Test 1: T·∫°o khuy·∫øn m√£i
            console.log('üìù Test 1: T·∫°o khuy·∫øn m√£i m·ªõi');
            const createdPromotion = await this.testCreatePromotion();
            const promotionId = createdPromotion.id;
            console.log('');

            // Test 2: L·∫•y danh s√°ch
            console.log('üìã Test 2: L·∫•y danh s√°ch khuy·∫øn m√£i');
            await this.testGetAllPromotions();
            console.log('');

            // Test 3: L·∫•y theo ID
            console.log('üîç Test 3: L·∫•y khuy·∫øn m√£i theo ID');
            await this.testGetPromotionById(promotionId);
            console.log('');

            // Test 4: T√¨m ki·∫øm
            console.log('üîé Test 4: T√¨m ki·∫øm khuy·∫øn m√£i');
            await this.testSearchPromotions('Test');
            console.log('');

            // Test 5: L·∫•y active
            console.log('‚úÖ Test 5: L·∫•y khuy·∫øn m√£i ƒëang ho·∫°t ƒë·ªông');
            await this.testGetActivePromotions();
            console.log('');

            // Test 6: Ph√¢n trang
            console.log('üìÑ Test 6: L·∫•y khuy·∫øn m√£i c√≥ ph√¢n trang');
            await this.testGetPromotionsPaged(0, 5);
            console.log('');

            // Test 7: ƒê·∫øm
            console.log('üî¢ Test 7: ƒê·∫øm khuy·∫øn m√£i');
            await this.testCountPromotions();
            await this.testCountPromotions(true);
            console.log('');

            // Test 8: C·∫≠p nh·∫≠t
            console.log('‚úèÔ∏è Test 8: C·∫≠p nh·∫≠t khuy·∫øn m√£i');
            const updateData = {
                name: "Test Khuy·∫øn m√£i API - Updated",
                description: "Khuy·∫øn m√£i test ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t",
                discountPercent: 25,
                startDate: "2024-01-01T00:00:00",
                endDate: "2024-12-31T23:59:59",
                isActive: true
            };
            await this.testUpdatePromotion(promotionId, updateData);
            console.log('');

            // Test 9: X√≥a
            console.log('üóëÔ∏è Test 9: X√≥a khuy·∫øn m√£i');
            await this.testDeletePromotion(promotionId);
            console.log('');

            console.log('üéâ T·∫•t c·∫£ tests ƒë√£ ho√†n th√†nh th√†nh c√¥ng!');

        } catch (error) {
            console.error('üí• Test th·∫•t b·∫°i:', error);
        }
    }

    /**
     * Test m·ªôt endpoint c·ª• th·ªÉ
     */
    async testEndpoint(endpoint, method = 'GET', data = null) {
        const url = `${this.apiBase}${endpoint}`;
        const options = {
            method: method,
            headers: {
                'Content-Type': 'application/json',
            }
        };

        if (data) {
            options.body = JSON.stringify(data);
        }

        try {
            const response = await fetch(url, options);
            const result = await response.json();
            console.log(`‚úÖ ${method} ${endpoint} th√†nh c√¥ng:`, result);
            return result;
        } catch (error) {
            console.error(`‚ùå L·ªói ${method} ${endpoint}:`, error);
            throw error;
        }
    }
}

// S·ª≠ d·ª•ng
const tester = new PromotionAPITester();

// Ch·∫°y t·∫•t c·∫£ tests
// tester.runAllTests();

// Test m·ªôt endpoint c·ª• th·ªÉ
// tester.testEndpoint('/search?name=test', 'GET');

// Export cho s·ª≠ d·ª•ng trong browser console
window.PromotionAPITester = PromotionAPITester;
window.promotionTester = tester;

console.log('üìö Promotion API Tester ƒë√£ s·∫µn s√†ng!');
console.log('S·ª≠ d·ª•ng:');
console.log('- promotionTester.runAllTests() - Ch·∫°y t·∫•t c·∫£ tests');
console.log('- promotionTester.testCreatePromotion() - Test t·∫°o khuy·∫øn m√£i');
console.log('- promotionTester.testGetAllPromotions() - Test l·∫•y danh s√°ch');
console.log('- promotionTester.testEndpoint("/search?name=test") - Test endpoint c·ª• th·ªÉ');
