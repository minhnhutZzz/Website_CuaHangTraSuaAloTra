package com.example.spring_boot.services.products; // Package service qu·∫£n l√Ω thu·ªôc t√≠nh s·∫£n ph·∫©m

import com.example.spring_boot.domains.products.ProductAttribute; // Entity thu·ªôc t√≠nh s·∫£n ph·∫©m
import com.example.spring_boot.repository.products.ProductAttributeRepository; // Repository Mongo cho thu·ªôc t√≠nh

import lombok.RequiredArgsConstructor; // Inject constructor cho field final
import lombok.extern.slf4j.Slf4j; // H·ªó tr·ª£ logging
import org.bson.types.ObjectId; // ObjectId MongoDB
import org.springframework.data.mongodb.core.MongoTemplate; // MongoDB template cho query t·ªëi ∆∞u
import org.springframework.data.mongodb.core.query.Criteria; // Criteria cho query
import org.springframework.data.mongodb.core.query.Query; // Query builder
import org.springframework.stereotype.Service; // Bean service Spring
import org.springframework.transaction.annotation.Transactional; // Transactional wrapper

import java.time.Instant; // Th·ªùi ƒëi·ªÉm UTC
import java.util.List; // Danh s√°ch k·∫øt qu·∫£

@Service // ƒêƒÉng k√Ω bean service
@RequiredArgsConstructor // T·∫°o constructor cho field final
@Slf4j // B·∫≠t logging
@Transactional // Transaction cho class
public class ProductAttributeService {

    private final ProductAttributeRepository productAttributeRepository; // DAO thu·ªôc t√≠nh s·∫£n ph·∫©m
    private final MongoTemplate mongoTemplate; // MongoDB template cho query t·ªëi ∆∞u

    /** T·∫°o thu·ªôc t√≠nh m·ªõi cho s·∫£n ph·∫©m. */
    public ProductAttribute create(ProductAttribute attr) {
        try {
            attr.setId(null); // Reset id ƒë·ªÉ ƒë·∫£m b·∫£o t·∫°o m·ªõi
            attr.setCreatedAt(Instant.now()); // G√°n th·ªùi ƒëi·ªÉm t·∫°o
            return productAttributeRepository.save(attr); // L∆∞u v√† tr·∫£ v·ªÅ entity ƒë√£ l∆∞u
        } catch (Exception e) {
            log.error("Create product attribute failed, productId={}", attr != null ? attr.getProductId() : null, e); // Log ng·ªØ c·∫£nh
            throw new RuntimeException("Failed to create product attribute: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp v·ª•
        }
    }

    /** X√≥a m·ªÅm thu·ªôc t√≠nh theo id. */
    public void softDelete(String id) {
        try {
            ProductAttribute attr = productAttributeRepository.findById(id) // T√¨m attribute theo id
                    .orElseThrow(() -> new RuntimeException("Product attribute not found with ID: " + id)); // Kh√¥ng th·∫•y -> l·ªói
            if (attr.getDeletedAt() != null)
                throw new RuntimeException("Product attribute has been deleted"); // ƒê√£ x√≥a m·ªÅm -> ch·∫∑n thao t√°c l·∫∑p
            attr.setDeletedAt(Instant.now()); // ƒê√°nh d·∫•u x√≥a m·ªÅm
            productAttributeRepository.save(attr); // L∆∞u thay ƒë·ªïi
        } catch (Exception e) {
            log.error("Soft delete product attribute failed, id={}", id, e); // Log ng·ªØ c·∫£nh l·ªói
            throw new RuntimeException("Failed to soft delete product attribute: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp v·ª•
        }
    }

    @Transactional(readOnly = true)
    /** L·∫•y danh s√°ch thu·ªôc t√≠nh active theo productId - T·ªêI ∆ØU H√ìA v·ªõi projection. */
    public List<ProductAttribute> getByProductId(String productId) {
        long startTime = System.currentTimeMillis();
        log.info("üîß [PERFORMANCE] Getting attributes by product: {}", productId);
        
        try {
            Query query = new Query(Criteria.where("productId").is(new ObjectId(productId))
                    .and("deletedAt").isNull());
            query.fields().include("name", "value", "productId", "createdAt");
            
            List<ProductAttribute> attributes = mongoTemplate.find(query, ProductAttribute.class);
            
            long endTime = System.currentTimeMillis();
            log.info("‚úÖ [PERFORMANCE] Retrieved {} attributes for product {} in {}ms", 
                    attributes.size(), productId, endTime - startTime);
            return attributes;
        } catch (Exception e) {
            log.error("‚ùå [PERFORMANCE] Get attributes by product failed, productId={}", productId, e);
            throw new RuntimeException("Failed to get product attributes: " + e.getMessage(), e);
        }
    }
}
