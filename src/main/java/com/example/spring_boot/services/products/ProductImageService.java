package com.example.spring_boot.services.products; // Package service qu·∫£n l√Ω ·∫£nh s·∫£n ph·∫©m

import com.example.spring_boot.domains.products.ProductImage; // Entity ·∫£nh s·∫£n ph·∫©m
import com.example.spring_boot.repository.products.ProductImageRepository; // Repository Mongo cho ·∫£nh

import lombok.RequiredArgsConstructor; // Inject constructor cho field final
import lombok.extern.slf4j.Slf4j; // H·ªó tr·ª£ logging
import org.bson.types.ObjectId; // ObjectId c·ªßa Mongo
import org.springframework.data.mongodb.core.MongoTemplate; // MongoDB template cho query t·ªëi ∆∞u
import org.springframework.data.mongodb.core.query.Criteria; // Criteria cho query
import org.springframework.data.mongodb.core.query.Query; // Query builder
import org.springframework.stereotype.Service; // Bean service Spring
import org.springframework.transaction.annotation.Transactional; // Transactional

import java.time.Instant; // Th·ªùi ƒëi·ªÉm UTC
import java.util.List; // Danh s√°ch k·∫øt qu·∫£

@Service // ƒêƒÉng k√Ω bean service
@RequiredArgsConstructor // T·∫°o constructor
@Slf4j // B·∫≠t logging
@Transactional // B·∫≠t transaction cho class
public class ProductImageService {

    private final ProductImageRepository productImageRepository; // DAO ·∫£nh s·∫£n ph·∫©m
    private final MongoTemplate mongoTemplate; // MongoDB template cho query t·ªëi ∆∞u

    // Gi·ªõi h·∫°n t·ªëi ƒëa 8 ·∫£nh cho m·ªói s·∫£n ph·∫©m
    private static final int MAX_IMAGES_PER_PRODUCT = 8;

    /** T·∫°o m·ªõi ·∫£nh cho s·∫£n ph·∫©m v·ªõi validation gi·ªõi h·∫°n. */
    public ProductImage create(ProductImage image) {
        try {
            // Ki·ªÉm tra s·ªë l∆∞·ª£ng ·∫£nh hi·ªán t·∫°i
            List<ProductImage> existingImages = getByProductId(image.getProductId().toString());
            if (existingImages.size() >= MAX_IMAGES_PER_PRODUCT) {
                throw new RuntimeException("S·∫£n ph·∫©m ƒë√£ ƒë·∫°t gi·ªõi h·∫°n t·ªëi ƒëa " + MAX_IMAGES_PER_PRODUCT
                        + " ·∫£nh. Vui l√≤ng x√≥a ·∫£nh c≈© tr∆∞·ªõc khi th√™m ·∫£nh m·ªõi.");
            }

            image.setId(null); // Reset id ƒë·ªÉ ƒë·∫£m b·∫£o t·∫°o m·ªõi
            image.setCreatedAt(Instant.now()); // G√°n th·ªùi ƒëi·ªÉm t·∫°o
            return productImageRepository.save(image); // L∆∞u v√† tr·∫£ v·ªÅ entity ƒë√£ l∆∞u
        } catch (Exception e) {
            log.error("Create product image failed, productId={}", image != null ? image.getProductId() : null, e); // Log
                                                                                                                    // ng·ªØ
                                                                                                                    // c·∫£nh
            throw new RuntimeException("Failed to create product image: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp v·ª•
        }
    }

    /** X√≥a m·ªÅm ·∫£nh theo id. */
    public void softDelete(String id) {
        try {
            ProductImage img = productImageRepository.findById(id) // T√¨m ·∫£nh theo id
                    .orElseThrow(() -> new RuntimeException("Product image not found with ID: " + id)); // Kh√¥ng th·∫•y ->
                                                                                                        // l·ªói
            if (img.getDeletedAt() != null)
                throw new RuntimeException("Product image has been deleted"); // ƒê√£ x√≥a m·ªÅm -> ch·∫∑n thao t√°c l·∫∑p
            img.setDeletedAt(Instant.now()); // ƒê√°nh d·∫•u x√≥a m·ªÅm
            productImageRepository.save(img); // L∆∞u thay ƒë·ªïi
        } catch (Exception e) {
            log.error("Soft delete product image failed, id={}", id, e); // Log ng·ªØ c·∫£nh l·ªói
            throw new RuntimeException("Failed to soft delete product image: " + e.getMessage(), e); // Bao l·ªói nghi·ªáp
                                                                                                     // v·ª•
        }
    }

    @Transactional(readOnly = true)
    /** L·∫•y danh s√°ch ·∫£nh active theo productId - T·ªêI ∆ØU H√ìA v·ªõi projection. */
    public List<ProductImage> getByProductId(String productId) {
        long startTime = System.currentTimeMillis();
        log.info("üñºÔ∏è [PERFORMANCE] Getting images by product: {}", productId);

        try {
            Query query = new Query(Criteria.where("productId").is(new ObjectId(productId))
                    .and("deletedAt").isNull());
            query.fields().include("imageUrl", "altText", "productId", "createdAt");

            List<ProductImage> images = mongoTemplate.find(query, ProductImage.class);

            long endTime = System.currentTimeMillis();
            log.info("‚úÖ [PERFORMANCE] Retrieved {} images for product {} in {}ms",
                    images.size(), productId, endTime - startTime);
            return images;
        } catch (Exception e) {
            log.error("‚ùå [PERFORMANCE] Get images by product failed, productId={}", productId, e);
            throw new RuntimeException("Failed to get product images: " + e.getMessage(), e);
        }
    }

    /**
     * Ki·ªÉm tra s·ªë l∆∞·ª£ng ·∫£nh hi·ªán t·∫°i c·ªßa s·∫£n ph·∫©m
     */
    @Transactional(readOnly = true)
    public int getImageCountByProductId(String productId) {
        try {
            List<ProductImage> images = getByProductId(productId);
            return images.size();
        } catch (Exception e) {
            log.error("Get image count failed, productId={}", productId, e);
            return 0;
        }
    }

    /**
     * Ki·ªÉm tra c√≥ th·ªÉ th√™m ·∫£nh m·ªõi kh√¥ng
     */
    @Transactional(readOnly = true)
    public boolean canAddMoreImages(String productId) {
        return getImageCountByProductId(productId) < MAX_IMAGES_PER_PRODUCT;
    }

    /**
     * L·∫•y gi·ªõi h·∫°n t·ªëi ƒëa ·∫£nh cho m·ªói s·∫£n ph·∫©m
     */
    public static int getMaxImagesPerProduct() {
        return MAX_IMAGES_PER_PRODUCT;
    }
}
