package com.example.spring_boot.controllers.files;

import java.util.List;
import java.util.Map;
import java.util.concurrent.CompletableFuture;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.example.spring_boot.dto.ApiResponse;
import com.example.spring_boot.services.CloudinaryService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RestController
@RequestMapping("/api/cloudinary")
@RequiredArgsConstructor
@Tag(name = "Cloudinary", description = "Upload v√† qu·∫£n l√Ω ·∫£nh tr√™n Cloudinary")
@Slf4j
public class CloudinaryController {

    private final CloudinaryService cloudinaryService;

    @PostMapping
    @Operation(summary = "Upload ·∫£nh - T·ªëi ∆∞u h√≥a t·ªëc ƒë·ªô")
    public ResponseEntity<ApiResponse<Map<String, Object>>> uploadImage(@RequestParam("image") MultipartFile file) {
        long startTime = System.currentTimeMillis();
        log.info("üöÄ [UPLOAD] Starting upload for file: {} ({} bytes)", 
                file.getOriginalFilename(), file.getSize());
        
        try {
            // Validation nhanh
            if (file.isEmpty()) {
                return ResponseEntity.badRequest()
                    .body(ApiResponse.fail("File kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng"));
            }
            
            // Ki·ªÉm tra k√≠ch th∆∞·ªõc file (max 10MB)
            if (file.getSize() > 10 * 1024 * 1024) {
                return ResponseEntity.badRequest()
                    .body(ApiResponse.fail("File qu√° l·ªõn (t·ªëi ƒëa 10MB)"));
            }
            
            // Ki·ªÉm tra lo·∫°i file
            String contentType = file.getContentType();
            if (contentType == null || !contentType.startsWith("image/")) {
                return ResponseEntity.badRequest()
                    .body(ApiResponse.fail("Ch·ªâ ch·∫•p nh·∫≠n file ·∫£nh"));
            }
            
        Map<String, Object> data = this.cloudinaryService.upload(file);
            
            long endTime = System.currentTimeMillis();
            log.info("‚úÖ [UPLOAD] Upload completed in {}ms for file: {}", 
                    endTime - startTime, file.getOriginalFilename());
            
            ApiResponse<Map<String, Object>> response = new ApiResponse<>(
                true, 
                "·∫¢nh ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng", 
                data
            );
            return new ResponseEntity<>(response, HttpStatus.OK);
            
        } catch (Exception e) {
            long endTime = System.currentTimeMillis();
            log.error("‚ùå [UPLOAD] Upload failed after {}ms: {}", 
                    endTime - startTime, e.getMessage(), e);
            
            ApiResponse<Map<String, Object>> response = new ApiResponse<>(
                false, 
                "L·ªói khi upload ·∫£nh: " + e.getMessage(), 
                null
            );
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
    @PostMapping("/async")
    @Operation(summary = "Upload ·∫£nh b·∫•t ƒë·ªìng b·ªô - T·ªëc ƒë·ªô cao")
    public CompletableFuture<ResponseEntity<ApiResponse<Map<String, Object>>>> uploadImageAsync(
            @RequestParam("image") MultipartFile file) {
        
        long startTime = System.currentTimeMillis();
        log.info("üöÄ [ASYNC UPLOAD] Starting async upload for file: {} ({} bytes)", 
                file.getOriginalFilename(), file.getSize());
        
        return cloudinaryService.uploadAsync(file)
            .thenApply(data -> {
                long endTime = System.currentTimeMillis();
                log.info("‚úÖ [ASYNC UPLOAD] Upload completed in {}ms for file: {}", 
                        endTime - startTime, file.getOriginalFilename());
                
                ApiResponse<Map<String, Object>> response = new ApiResponse<>(
                    true, 
                    "·∫¢nh ƒë√£ ƒë∆∞·ª£c upload th√†nh c√¥ng (async)", 
                    data
                );
                return new ResponseEntity<>(response, HttpStatus.OK);
            })
            .exceptionally(throwable -> {
                long endTime = System.currentTimeMillis();
                log.error("‚ùå [ASYNC UPLOAD] Upload failed after {}ms: {}", 
                        endTime - startTime, throwable.getMessage(), throwable);
                
                ApiResponse<Map<String, Object>> response = new ApiResponse<>(
                    false, 
                    "L·ªói khi upload ·∫£nh (async): " + throwable.getMessage(), 
                    null
                );
                return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
            });
    }

    @PostMapping("/multiple")
    @Operation(summary = "Upload nhi·ªÅu ·∫£nh c√πng l√∫c - T·ªëc ƒë·ªô cao")
    public CompletableFuture<ResponseEntity<ApiResponse<List<Map<String, Object>>>>> uploadMultipleImages(
            @RequestParam("images") MultipartFile[] files) {
        
        long startTime = System.currentTimeMillis();
        log.info("üöÄ [MULTI UPLOAD] Starting upload for {} files", files.length);
        
        try {
            // Validation
            if (files.length == 0) {
                return CompletableFuture.completedFuture(
                    ResponseEntity.badRequest()
                        .body(ApiResponse.fail("Kh√¥ng c√≥ file n√†o ƒë∆∞·ª£c ch·ªçn"))
                );
            }
            
            if (files.length > 10) {
                return CompletableFuture.completedFuture(
                    ResponseEntity.badRequest()
                        .body(ApiResponse.fail("T·ªëi ƒëa 10 file m·ªói l·∫ßn upload"))
                );
            }
            
            // Upload t·∫•t c·∫£ files song song
            List<CompletableFuture<Map<String, Object>>> uploadFutures = 
                java.util.Arrays.stream(files)
                    .map(cloudinaryService::uploadAsync)
                    .collect(java.util.stream.Collectors.toList());
            
            // Ch·ªù t·∫•t c·∫£ uploads ho√†n th√†nh
            return CompletableFuture.allOf(uploadFutures.toArray(new CompletableFuture[0]))
                .thenApply(v -> {
                    List<Map<String, Object>> results = uploadFutures.stream()
                        .map(CompletableFuture::join)
                        .collect(java.util.stream.Collectors.toList());
                    
                    long endTime = System.currentTimeMillis();
                    log.info("‚úÖ [MULTI UPLOAD] Uploaded {} files in {}ms", 
                            results.size(), endTime - startTime);
                    
                    ApiResponse<List<Map<String, Object>>> response = new ApiResponse<>(
                        true, 
                        "ƒê√£ upload th√†nh c√¥ng " + results.size() + " ·∫£nh", 
                        results
                    );
                    return new ResponseEntity<>(response, HttpStatus.OK);
                })
                .exceptionally(throwable -> {
                    long endTime = System.currentTimeMillis();
                    log.error("‚ùå [MULTI UPLOAD] Upload failed after {}ms: {}", 
                            endTime - startTime, throwable.getMessage(), throwable);
                    
                    ApiResponse<List<Map<String, Object>>> response = new ApiResponse<>(
                        false, 
                        "L·ªói khi upload nhi·ªÅu ·∫£nh: " + throwable.getMessage(), 
                        null
                    );
                    return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
                });
                
        } catch (Exception e) {
            long endTime = System.currentTimeMillis();
            log.error("‚ùå [MULTI UPLOAD] Upload failed after {}ms: {}", 
                    endTime - startTime, e.getMessage(), e);
            
            ApiResponse<List<Map<String, Object>>> response = new ApiResponse<>(
                false, 
                "L·ªói khi upload nhi·ªÅu ·∫£nh: " + e.getMessage(), 
                null
            );
            return CompletableFuture.completedFuture(
                new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR)
            );
        }
    }

    @GetMapping("/images/{folder}")
    @Operation(summary = "Danh s√°ch ·∫£nh theo folder")
    public ResponseEntity<?> getImages(@PathVariable String folder) {
        try {
            List<Map<String, Object>> images = cloudinaryService.getImagesInFolder(folder);
            return ResponseEntity.ok(images);
        } catch (Exception e) {
            return ResponseEntity.status(500).body("Error: " + e.getMessage());
        }
    }
}